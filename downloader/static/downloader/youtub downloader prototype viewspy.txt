from django.shortcuts import render
import pytube
from django.shortcuts import redirect
from pytube import YouTube 
from django import forms
from django.http import FileResponse
from django.http import HttpResponse
import requests
from urllib.request import Request, urlopen    
import os
from moviepy.editor import *

from django.core.mail import send_mail
from_email= "lexdoyle2@gmail.com"
class downloadInput(forms.Form):
     urlInput= forms.CharField(label="Video URL ")

def index(request):
     return render(request, "downloader/index.html", {
        "formremove": downloadInput()
        
     })
def download(request):
     try:
          global url
          url = request.POST.get('urlinput')
          stream= pytube.YouTube(url).streams.all()
          global title
          title =YouTube(url).title
          print(title)          
          resolutions=[]
          global directory
          directory = os.getcwd()
          files_in_directory = os.listdir(directory)
          filtered_files = [file for file in files_in_directory if file.endswith(".mp4")]
          for file in filtered_files:
           path_to_file = os.path.join(directory, file)
           os.remove(path_to_file)
          for i in stream:
               resolutions.append(i.resolution)
               resolutions= list(dict.fromkeys(resolutions))
          if "watch?v=" in url:
               global embed 
               embed = url.replace("watch?v=", "embed/")
          else:
               
               key= url.split("https://youtu.be/", 1)[1]
               embed="https://www.youtube.com/embed/" + key
               print(embed)
          return render(request, "downloader/download.html", {
                    "url" : embed, 
                    "stream": stream,
                    "resolutions": resolutions
               })
     except:
          alert = "üëÆüêßPlease enter a Valid URL‚ÄºÔ∏è"
          return render(request, "downloader/index.html", {
               "message" : alert})

def download3(request):
     video_res= request.POST.get('selected_res')
     YouTube(url).streams.filter(only_audio=True).first().download(skip_existing=True)
     title = YouTube(url).title
     mp4_file=title+ ".mp4"
     mp3_file=title+ ".mp3"
     vidpath = os.path.join(directory, mp4_file)
     audpath = os.path.join(directory, mp3_file)
     audioclip = AudioFileClip(vidpath)
     audioclip.write_audiofile(audpath)
     audioclip.close()
     f = open(audpath,'rb') 
     response = HttpResponse()
     response.write(f.read())
     response['Content-Type'] ='audio/mp3'
     response['Content-Length'] =os.path.getsize(audpath)
     return response
def download2(request):
     video_res= request.POST.get('selected_res')
     return FileResponse(open(YouTube(url).streams.filter(res=video_res).first().download(skip_existing=True),'rb'))
def suggestions(request):
     return render(request, "downloader/suggestions.htpyml")
def features(request):
     return render(request, "downloader/features.html")
def suggestionform(request):
     name =request.POST.get('name')
     email = request.POST.get('email')
     suggestion= request.POST.get('suggestion')
     subject="Youtube Downloader Suggestion form submission"
     message = "_________________________Form submission record___________________________"+ "\n"+"Sender name: " + name +"\n" + "Sender's email: " + email +"\n" +  "Suggestion: "+ suggestion
     directory = os.getcwd()
     newpath= os.path.join(directory, "suggestions.txt")
     print(newpath)

     if message!="":
          try:
               formfile= open(newpath,'a')
               print(message)
               formfile.write(message + '\n')
               formfile.close()
               alert = "ü•≥üêØü•≥Your suggestions have been submitted. THANK YOU"
               return render(request, "downloader/index.html", {
               "message": alert})
          except:
               alert = "There was an error during submission üò£ü¶äüò£"
               return render(request, "downloader/index.html", {
               "message": alert})
